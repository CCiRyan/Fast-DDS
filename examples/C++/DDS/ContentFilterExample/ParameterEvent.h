// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ParameterEvent.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _PARAMETEREVENT_H_
#define _PARAMETEREVENT_H_


#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(ParameterEvent_SOURCE)
#define ParameterEvent_DllAPI __declspec( dllexport )
#else
#define ParameterEvent_DllAPI __declspec( dllimport )
#endif // ParameterEvent_SOURCE
#else
#define ParameterEvent_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define ParameterEvent_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*!
 * @brief This class represents the structure Time defined by the user in the IDL file.
 * @ingroup PARAMETEREVENT
 */
class Time
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Time();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Time();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Time that will be copied.
     */
    eProsima_user_DllExport Time(
            const Time& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Time that will be copied.
     */
    eProsima_user_DllExport Time(
            Time&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Time that will be copied.
     */
    eProsima_user_DllExport Time& operator =(
            const Time& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Time that will be copied.
     */
    eProsima_user_DllExport Time& operator =(
            Time&& x);

    /*!
     * @brief This function sets a value in member sec
     * @param _sec New value for member sec
     */
    eProsima_user_DllExport void sec(
            int32_t _sec);

    /*!
     * @brief This function returns the value of member sec
     * @return Value of member sec
     */
    eProsima_user_DllExport int32_t sec() const;

    /*!
     * @brief This function returns a reference to member sec
     * @return Reference to member sec
     */
    eProsima_user_DllExport int32_t& sec();

    /*!
     * @brief This function sets a value in member nanosec
     * @param _nanosec New value for member nanosec
     */
    eProsima_user_DllExport void nanosec(
            uint32_t _nanosec);

    /*!
     * @brief This function returns the value of member nanosec
     * @return Value of member nanosec
     */
    eProsima_user_DllExport uint32_t nanosec() const;

    /*!
     * @brief This function returns a reference to member nanosec
     * @return Reference to member nanosec
     */
    eProsima_user_DllExport uint32_t& nanosec();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Time& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int32_t m_sec;
    uint32_t m_nanosec;
};
/*!
 * @brief This class represents the structure ParameterValue defined by the user in the IDL file.
 * @ingroup PARAMETEREVENT
 */
class ParameterValue
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ParameterValue();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ParameterValue();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ParameterValue that will be copied.
     */
    eProsima_user_DllExport ParameterValue(
            const ParameterValue& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ParameterValue that will be copied.
     */
    eProsima_user_DllExport ParameterValue(
            ParameterValue&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ParameterValue that will be copied.
     */
    eProsima_user_DllExport ParameterValue& operator =(
            const ParameterValue& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ParameterValue that will be copied.
     */
    eProsima_user_DllExport ParameterValue& operator =(
            ParameterValue&& x);

    /*!
     * @brief This function sets a value in member type
     * @param _type New value for member type
     */
    eProsima_user_DllExport void type(
            uint8_t _type);

    /*!
     * @brief This function returns the value of member type
     * @return Value of member type
     */
    eProsima_user_DllExport uint8_t type() const;

    /*!
     * @brief This function returns a reference to member type
     * @return Reference to member type
     */
    eProsima_user_DllExport uint8_t& type();

    /*!
     * @brief This function sets a value in member bool_value
     * @param _bool_value New value for member bool_value
     */
    eProsima_user_DllExport void bool_value(
            bool _bool_value);

    /*!
     * @brief This function returns the value of member bool_value
     * @return Value of member bool_value
     */
    eProsima_user_DllExport bool bool_value() const;

    /*!
     * @brief This function returns a reference to member bool_value
     * @return Reference to member bool_value
     */
    eProsima_user_DllExport bool& bool_value();

    /*!
     * @brief This function sets a value in member integer_value
     * @param _integer_value New value for member integer_value
     */
    eProsima_user_DllExport void integer_value(
            int64_t _integer_value);

    /*!
     * @brief This function returns the value of member integer_value
     * @return Value of member integer_value
     */
    eProsima_user_DllExport int64_t integer_value() const;

    /*!
     * @brief This function returns a reference to member integer_value
     * @return Reference to member integer_value
     */
    eProsima_user_DllExport int64_t& integer_value();

    /*!
     * @brief This function sets a value in member double_value
     * @param _double_value New value for member double_value
     */
    eProsima_user_DllExport void double_value(
            double _double_value);

    /*!
     * @brief This function returns the value of member double_value
     * @return Value of member double_value
     */
    eProsima_user_DllExport double double_value() const;

    /*!
     * @brief This function returns a reference to member double_value
     * @return Reference to member double_value
     */
    eProsima_user_DllExport double& double_value();

    /*!
     * @brief This function copies the value in member string_value
     * @param _string_value New value to be copied in member string_value
     */
    eProsima_user_DllExport void string_value(
            const std::string& _string_value);

    /*!
     * @brief This function moves the value in member string_value
     * @param _string_value New value to be moved in member string_value
     */
    eProsima_user_DllExport void string_value(
            std::string&& _string_value);

    /*!
     * @brief This function returns a constant reference to member string_value
     * @return Constant reference to member string_value
     */
    eProsima_user_DllExport const std::string& string_value() const;

    /*!
     * @brief This function returns a reference to member string_value
     * @return Reference to member string_value
     */
    eProsima_user_DllExport std::string& string_value();
    /*!
     * @brief This function copies the value in member byte_array_value
     * @param _byte_array_value New value to be copied in member byte_array_value
     */
    eProsima_user_DllExport void byte_array_value(
            const std::vector<uint8_t>& _byte_array_value);

    /*!
     * @brief This function moves the value in member byte_array_value
     * @param _byte_array_value New value to be moved in member byte_array_value
     */
    eProsima_user_DllExport void byte_array_value(
            std::vector<uint8_t>&& _byte_array_value);

    /*!
     * @brief This function returns a constant reference to member byte_array_value
     * @return Constant reference to member byte_array_value
     */
    eProsima_user_DllExport const std::vector<uint8_t>& byte_array_value() const;

    /*!
     * @brief This function returns a reference to member byte_array_value
     * @return Reference to member byte_array_value
     */
    eProsima_user_DllExport std::vector<uint8_t>& byte_array_value();
    /*!
     * @brief This function copies the value in member bool_array_value
     * @param _bool_array_value New value to be copied in member bool_array_value
     */
    eProsima_user_DllExport void bool_array_value(
            const std::vector<bool>& _bool_array_value);

    /*!
     * @brief This function moves the value in member bool_array_value
     * @param _bool_array_value New value to be moved in member bool_array_value
     */
    eProsima_user_DllExport void bool_array_value(
            std::vector<bool>&& _bool_array_value);

    /*!
     * @brief This function returns a constant reference to member bool_array_value
     * @return Constant reference to member bool_array_value
     */
    eProsima_user_DllExport const std::vector<bool>& bool_array_value() const;

    /*!
     * @brief This function returns a reference to member bool_array_value
     * @return Reference to member bool_array_value
     */
    eProsima_user_DllExport std::vector<bool>& bool_array_value();
    /*!
     * @brief This function copies the value in member integer_array_value
     * @param _integer_array_value New value to be copied in member integer_array_value
     */
    eProsima_user_DllExport void integer_array_value(
            const std::vector<int64_t>& _integer_array_value);

    /*!
     * @brief This function moves the value in member integer_array_value
     * @param _integer_array_value New value to be moved in member integer_array_value
     */
    eProsima_user_DllExport void integer_array_value(
            std::vector<int64_t>&& _integer_array_value);

    /*!
     * @brief This function returns a constant reference to member integer_array_value
     * @return Constant reference to member integer_array_value
     */
    eProsima_user_DllExport const std::vector<int64_t>& integer_array_value() const;

    /*!
     * @brief This function returns a reference to member integer_array_value
     * @return Reference to member integer_array_value
     */
    eProsima_user_DllExport std::vector<int64_t>& integer_array_value();
    /*!
     * @brief This function copies the value in member double_array_value
     * @param _double_array_value New value to be copied in member double_array_value
     */
    eProsima_user_DllExport void double_array_value(
            const std::vector<double>& _double_array_value);

    /*!
     * @brief This function moves the value in member double_array_value
     * @param _double_array_value New value to be moved in member double_array_value
     */
    eProsima_user_DllExport void double_array_value(
            std::vector<double>&& _double_array_value);

    /*!
     * @brief This function returns a constant reference to member double_array_value
     * @return Constant reference to member double_array_value
     */
    eProsima_user_DllExport const std::vector<double>& double_array_value() const;

    /*!
     * @brief This function returns a reference to member double_array_value
     * @return Reference to member double_array_value
     */
    eProsima_user_DllExport std::vector<double>& double_array_value();
    /*!
     * @brief This function copies the value in member string_array_value
     * @param _string_array_value New value to be copied in member string_array_value
     */
    eProsima_user_DllExport void string_array_value(
            const std::vector<std::string>& _string_array_value);

    /*!
     * @brief This function moves the value in member string_array_value
     * @param _string_array_value New value to be moved in member string_array_value
     */
    eProsima_user_DllExport void string_array_value(
            std::vector<std::string>&& _string_array_value);

    /*!
     * @brief This function returns a constant reference to member string_array_value
     * @return Constant reference to member string_array_value
     */
    eProsima_user_DllExport const std::vector<std::string>& string_array_value() const;

    /*!
     * @brief This function returns a reference to member string_array_value
     * @return Reference to member string_array_value
     */
    eProsima_user_DllExport std::vector<std::string>& string_array_value();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const ParameterValue& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    uint8_t m_type;
    bool m_bool_value;
    int64_t m_integer_value;
    double m_double_value;
    std::string m_string_value;
    std::vector<uint8_t> m_byte_array_value;
    std::vector<bool> m_bool_array_value;
    std::vector<int64_t> m_integer_array_value;
    std::vector<double> m_double_array_value;
    std::vector<std::string> m_string_array_value;
};
/*!
 * @brief This class represents the structure Parameter defined by the user in the IDL file.
 * @ingroup PARAMETEREVENT
 */
class Parameter
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Parameter();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Parameter();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Parameter that will be copied.
     */
    eProsima_user_DllExport Parameter(
            const Parameter& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Parameter that will be copied.
     */
    eProsima_user_DllExport Parameter(
            Parameter&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Parameter that will be copied.
     */
    eProsima_user_DllExport Parameter& operator =(
            const Parameter& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Parameter that will be copied.
     */
    eProsima_user_DllExport Parameter& operator =(
            Parameter&& x);

    /*!
     * @brief This function copies the value in member name
     * @param _name New value to be copied in member name
     */
    eProsima_user_DllExport void name(
            const std::string& _name);

    /*!
     * @brief This function moves the value in member name
     * @param _name New value to be moved in member name
     */
    eProsima_user_DllExport void name(
            std::string&& _name);

    /*!
     * @brief This function returns a constant reference to member name
     * @return Constant reference to member name
     */
    eProsima_user_DllExport const std::string& name() const;

    /*!
     * @brief This function returns a reference to member name
     * @return Reference to member name
     */
    eProsima_user_DllExport std::string& name();
    /*!
     * @brief This function copies the value in member value
     * @param _value New value to be copied in member value
     */
    eProsima_user_DllExport void value(
            const ParameterValue& _value);

    /*!
     * @brief This function moves the value in member value
     * @param _value New value to be moved in member value
     */
    eProsima_user_DllExport void value(
            ParameterValue&& _value);

    /*!
     * @brief This function returns a constant reference to member value
     * @return Constant reference to member value
     */
    eProsima_user_DllExport const ParameterValue& value() const;

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport ParameterValue& value();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Parameter& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std::string m_name;
    ParameterValue m_value;
};
/*!
 * @brief This class represents the structure ParameterEvent defined by the user in the IDL file.
 * @ingroup PARAMETEREVENT
 */
class ParameterEvent
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ParameterEvent();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ParameterEvent();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ParameterEvent that will be copied.
     */
    eProsima_user_DllExport ParameterEvent(
            const ParameterEvent& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ParameterEvent that will be copied.
     */
    eProsima_user_DllExport ParameterEvent(
            ParameterEvent&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ParameterEvent that will be copied.
     */
    eProsima_user_DllExport ParameterEvent& operator =(
            const ParameterEvent& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ParameterEvent that will be copied.
     */
    eProsima_user_DllExport ParameterEvent& operator =(
            ParameterEvent&& x);

    /*!
     * @brief This function copies the value in member stamp
     * @param _stamp New value to be copied in member stamp
     */
    eProsima_user_DllExport void stamp(
            const Time& _stamp);

    /*!
     * @brief This function moves the value in member stamp
     * @param _stamp New value to be moved in member stamp
     */
    eProsima_user_DllExport void stamp(
            Time&& _stamp);

    /*!
     * @brief This function returns a constant reference to member stamp
     * @return Constant reference to member stamp
     */
    eProsima_user_DllExport const Time& stamp() const;

    /*!
     * @brief This function returns a reference to member stamp
     * @return Reference to member stamp
     */
    eProsima_user_DllExport Time& stamp();
    /*!
     * @brief This function copies the value in member node
     * @param _node New value to be copied in member node
     */
    eProsima_user_DllExport void node(
            const std::string& _node);

    /*!
     * @brief This function moves the value in member node
     * @param _node New value to be moved in member node
     */
    eProsima_user_DllExport void node(
            std::string&& _node);

    /*!
     * @brief This function returns a constant reference to member node
     * @return Constant reference to member node
     */
    eProsima_user_DllExport const std::string& node() const;

    /*!
     * @brief This function returns a reference to member node
     * @return Reference to member node
     */
    eProsima_user_DllExport std::string& node();
    /*!
     * @brief This function copies the value in member new_parameters
     * @param _new_parameters New value to be copied in member new_parameters
     */
    eProsima_user_DllExport void new_parameters(
            const std::vector<Parameter>& _new_parameters);

    /*!
     * @brief This function moves the value in member new_parameters
     * @param _new_parameters New value to be moved in member new_parameters
     */
    eProsima_user_DllExport void new_parameters(
            std::vector<Parameter>&& _new_parameters);

    /*!
     * @brief This function returns a constant reference to member new_parameters
     * @return Constant reference to member new_parameters
     */
    eProsima_user_DllExport const std::vector<Parameter>& new_parameters() const;

    /*!
     * @brief This function returns a reference to member new_parameters
     * @return Reference to member new_parameters
     */
    eProsima_user_DllExport std::vector<Parameter>& new_parameters();
    /*!
     * @brief This function copies the value in member changed_parameters
     * @param _changed_parameters New value to be copied in member changed_parameters
     */
    eProsima_user_DllExport void changed_parameters(
            const std::vector<Parameter>& _changed_parameters);

    /*!
     * @brief This function moves the value in member changed_parameters
     * @param _changed_parameters New value to be moved in member changed_parameters
     */
    eProsima_user_DllExport void changed_parameters(
            std::vector<Parameter>&& _changed_parameters);

    /*!
     * @brief This function returns a constant reference to member changed_parameters
     * @return Constant reference to member changed_parameters
     */
    eProsima_user_DllExport const std::vector<Parameter>& changed_parameters() const;

    /*!
     * @brief This function returns a reference to member changed_parameters
     * @return Reference to member changed_parameters
     */
    eProsima_user_DllExport std::vector<Parameter>& changed_parameters();
    /*!
     * @brief This function copies the value in member deleted_parameters
     * @param _deleted_parameters New value to be copied in member deleted_parameters
     */
    eProsima_user_DllExport void deleted_parameters(
            const std::vector<Parameter>& _deleted_parameters);

    /*!
     * @brief This function moves the value in member deleted_parameters
     * @param _deleted_parameters New value to be moved in member deleted_parameters
     */
    eProsima_user_DllExport void deleted_parameters(
            std::vector<Parameter>&& _deleted_parameters);

    /*!
     * @brief This function returns a constant reference to member deleted_parameters
     * @return Constant reference to member deleted_parameters
     */
    eProsima_user_DllExport const std::vector<Parameter>& deleted_parameters() const;

    /*!
     * @brief This function returns a reference to member deleted_parameters
     * @return Reference to member deleted_parameters
     */
    eProsima_user_DllExport std::vector<Parameter>& deleted_parameters();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const ParameterEvent& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    Time m_stamp;
    std::string m_node;
    std::vector<Parameter> m_new_parameters;
    std::vector<Parameter> m_changed_parameters;
    std::vector<Parameter> m_deleted_parameters;
};

#endif // _PARAMETEREVENT_H_