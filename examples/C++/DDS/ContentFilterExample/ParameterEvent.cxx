// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ParameterEvent.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "ParameterEvent.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

Time::Time()
{
    // m_sec com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1686d1f
    m_sec = 0;
    // m_nanosec com.eprosima.idl.parser.typecode.PrimitiveTypeCode@13ad2d6
    m_nanosec = 0;

}

Time::~Time()
{


}

Time::Time(
        const Time& x)
{
    m_sec = x.m_sec;
    m_nanosec = x.m_nanosec;
}

Time::Time(
        Time&& x)
{
    m_sec = x.m_sec;
    m_nanosec = x.m_nanosec;
}

Time& Time::operator =(
        const Time& x)
{

    m_sec = x.m_sec;
    m_nanosec = x.m_nanosec;

    return *this;
}

Time& Time::operator =(
        Time&& x)
{

    m_sec = x.m_sec;
    m_nanosec = x.m_nanosec;

    return *this;
}

size_t Time::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t Time::getCdrSerializedSize(
        const Time& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void Time::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_sec;
    scdr << m_nanosec;

}

void Time::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_sec;
    dcdr >> m_nanosec;
}

/*!
 * @brief This function sets a value in member sec
 * @param _sec New value for member sec
 */
void Time::sec(
        int32_t _sec)
{
    m_sec = _sec;
}

/*!
 * @brief This function returns the value of member sec
 * @return Value of member sec
 */
int32_t Time::sec() const
{
    return m_sec;
}

/*!
 * @brief This function returns a reference to member sec
 * @return Reference to member sec
 */
int32_t& Time::sec()
{
    return m_sec;
}

/*!
 * @brief This function sets a value in member nanosec
 * @param _nanosec New value for member nanosec
 */
void Time::nanosec(
        uint32_t _nanosec)
{
    m_nanosec = _nanosec;
}

/*!
 * @brief This function returns the value of member nanosec
 * @return Value of member nanosec
 */
uint32_t Time::nanosec() const
{
    return m_nanosec;
}

/*!
 * @brief This function returns a reference to member nanosec
 * @return Reference to member nanosec
 */
uint32_t& Time::nanosec()
{
    return m_nanosec;
}


size_t Time::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool Time::isKeyDefined()
{
    return false;
}

void Time::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}

ParameterValue::ParameterValue()
{
    // m_type com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1c6f14e
    m_type = 0;
    // m_bool_value com.eprosima.idl.parser.typecode.PrimitiveTypeCode@235b8e
    m_bool_value = false;
    // m_integer_value com.eprosima.idl.parser.typecode.PrimitiveTypeCode@32be31
    m_integer_value = 0;
    // m_double_value com.eprosima.idl.parser.typecode.PrimitiveTypeCode@bca1e0
    m_double_value = 0.0;
    // m_string_value com.eprosima.idl.parser.typecode.StringTypeCode@286778
    m_string_value ="";
    // m_byte_array_value com.eprosima.idl.parser.typecode.SequenceTypeCode@9ba398

    // m_bool_array_value com.eprosima.idl.parser.typecode.SequenceTypeCode@17b4f4c

    // m_integer_array_value com.eprosima.idl.parser.typecode.SequenceTypeCode@7740a2

    // m_double_array_value com.eprosima.idl.parser.typecode.SequenceTypeCode@1a5fe33

    // m_string_array_value com.eprosima.idl.parser.typecode.SequenceTypeCode@3108bc


}

ParameterValue::~ParameterValue()
{










}

ParameterValue::ParameterValue(
        const ParameterValue& x)
{
    m_type = x.m_type;
    m_bool_value = x.m_bool_value;
    m_integer_value = x.m_integer_value;
    m_double_value = x.m_double_value;
    m_string_value = x.m_string_value;
    m_byte_array_value = x.m_byte_array_value;
    m_bool_array_value = x.m_bool_array_value;
    m_integer_array_value = x.m_integer_array_value;
    m_double_array_value = x.m_double_array_value;
    m_string_array_value = x.m_string_array_value;
}

ParameterValue::ParameterValue(
        ParameterValue&& x)
{
    m_type = x.m_type;
    m_bool_value = x.m_bool_value;
    m_integer_value = x.m_integer_value;
    m_double_value = x.m_double_value;
    m_string_value = std::move(x.m_string_value);
    m_byte_array_value = std::move(x.m_byte_array_value);
    m_bool_array_value = std::move(x.m_bool_array_value);
    m_integer_array_value = std::move(x.m_integer_array_value);
    m_double_array_value = std::move(x.m_double_array_value);
    m_string_array_value = std::move(x.m_string_array_value);
}

ParameterValue& ParameterValue::operator =(
        const ParameterValue& x)
{

    m_type = x.m_type;
    m_bool_value = x.m_bool_value;
    m_integer_value = x.m_integer_value;
    m_double_value = x.m_double_value;
    m_string_value = x.m_string_value;
    m_byte_array_value = x.m_byte_array_value;
    m_bool_array_value = x.m_bool_array_value;
    m_integer_array_value = x.m_integer_array_value;
    m_double_array_value = x.m_double_array_value;
    m_string_array_value = x.m_string_array_value;

    return *this;
}

ParameterValue& ParameterValue::operator =(
        ParameterValue&& x)
{

    m_type = x.m_type;
    m_bool_value = x.m_bool_value;
    m_integer_value = x.m_integer_value;
    m_double_value = x.m_double_value;
    m_string_value = std::move(x.m_string_value);
    m_byte_array_value = std::move(x.m_byte_array_value);
    m_bool_array_value = std::move(x.m_bool_array_value);
    m_integer_array_value = std::move(x.m_integer_array_value);
    m_double_array_value = std::move(x.m_double_array_value);
    m_string_array_value = std::move(x.m_string_array_value);

    return *this;
}

size_t ParameterValue::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;
    }

    return current_alignment - initial_alignment;
}

size_t ParameterValue::getCdrSerializedSize(
        const ParameterValue& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.string_value().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.byte_array_value().size() > 0)
    {
        current_alignment += (data.byte_array_value().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.bool_array_value().size() > 0)
    {
        current_alignment += (data.bool_array_value().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.integer_array_value().size() > 0)
    {
        current_alignment += (data.integer_array_value().size() * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.double_array_value().size() > 0)
    {
        current_alignment += (data.double_array_value().size() * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.string_array_value().size(); ++a)
    {
        current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) +
            data.string_array_value().at(a).size() + 1;
    }

    return current_alignment - initial_alignment;
}

void ParameterValue::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_type;
    scdr << m_bool_value;
    scdr << m_integer_value;
    scdr << m_double_value;
    scdr << m_string_value;
    scdr << m_byte_array_value;
    scdr << m_bool_array_value;
    scdr << m_integer_array_value;
    scdr << m_double_array_value;
    scdr << m_string_array_value;
}

void ParameterValue::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_type;
    dcdr >> m_bool_value;
    dcdr >> m_integer_value;
    dcdr >> m_double_value;
    dcdr >> m_string_value;
    dcdr >> m_byte_array_value;
    dcdr >> m_bool_array_value;
    dcdr >> m_integer_array_value;
    dcdr >> m_double_array_value;
    dcdr >> m_string_array_value;
}

/*!
 * @brief This function sets a value in member type
 * @param _type New value for member type
 */
void ParameterValue::type(
        uint8_t _type)
{
    m_type = _type;
}

/*!
 * @brief This function returns the value of member type
 * @return Value of member type
 */
uint8_t ParameterValue::type() const
{
    return m_type;
}

/*!
 * @brief This function returns a reference to member type
 * @return Reference to member type
 */
uint8_t& ParameterValue::type()
{
    return m_type;
}

/*!
 * @brief This function sets a value in member bool_value
 * @param _bool_value New value for member bool_value
 */
void ParameterValue::bool_value(
        bool _bool_value)
{
    m_bool_value = _bool_value;
}

/*!
 * @brief This function returns the value of member bool_value
 * @return Value of member bool_value
 */
bool ParameterValue::bool_value() const
{
    return m_bool_value;
}

/*!
 * @brief This function returns a reference to member bool_value
 * @return Reference to member bool_value
 */
bool& ParameterValue::bool_value()
{
    return m_bool_value;
}

/*!
 * @brief This function sets a value in member integer_value
 * @param _integer_value New value for member integer_value
 */
void ParameterValue::integer_value(
        int64_t _integer_value)
{
    m_integer_value = _integer_value;
}

/*!
 * @brief This function returns the value of member integer_value
 * @return Value of member integer_value
 */
int64_t ParameterValue::integer_value() const
{
    return m_integer_value;
}

/*!
 * @brief This function returns a reference to member integer_value
 * @return Reference to member integer_value
 */
int64_t& ParameterValue::integer_value()
{
    return m_integer_value;
}

/*!
 * @brief This function sets a value in member double_value
 * @param _double_value New value for member double_value
 */
void ParameterValue::double_value(
        double _double_value)
{
    m_double_value = _double_value;
}

/*!
 * @brief This function returns the value of member double_value
 * @return Value of member double_value
 */
double ParameterValue::double_value() const
{
    return m_double_value;
}

/*!
 * @brief This function returns a reference to member double_value
 * @return Reference to member double_value
 */
double& ParameterValue::double_value()
{
    return m_double_value;
}

/*!
 * @brief This function copies the value in member string_value
 * @param _string_value New value to be copied in member string_value
 */
void ParameterValue::string_value(
        const std::string& _string_value)
{
    m_string_value = _string_value;
}

/*!
 * @brief This function moves the value in member string_value
 * @param _string_value New value to be moved in member string_value
 */
void ParameterValue::string_value(
        std::string&& _string_value)
{
    m_string_value = std::move(_string_value);
}

/*!
 * @brief This function returns a constant reference to member string_value
 * @return Constant reference to member string_value
 */
const std::string& ParameterValue::string_value() const
{
    return m_string_value;
}

/*!
 * @brief This function returns a reference to member string_value
 * @return Reference to member string_value
 */
std::string& ParameterValue::string_value()
{
    return m_string_value;
}
/*!
 * @brief This function copies the value in member byte_array_value
 * @param _byte_array_value New value to be copied in member byte_array_value
 */
void ParameterValue::byte_array_value(
        const std::vector<uint8_t>& _byte_array_value)
{
    m_byte_array_value = _byte_array_value;
}

/*!
 * @brief This function moves the value in member byte_array_value
 * @param _byte_array_value New value to be moved in member byte_array_value
 */
void ParameterValue::byte_array_value(
        std::vector<uint8_t>&& _byte_array_value)
{
    m_byte_array_value = std::move(_byte_array_value);
}

/*!
 * @brief This function returns a constant reference to member byte_array_value
 * @return Constant reference to member byte_array_value
 */
const std::vector<uint8_t>& ParameterValue::byte_array_value() const
{
    return m_byte_array_value;
}

/*!
 * @brief This function returns a reference to member byte_array_value
 * @return Reference to member byte_array_value
 */
std::vector<uint8_t>& ParameterValue::byte_array_value()
{
    return m_byte_array_value;
}
/*!
 * @brief This function copies the value in member bool_array_value
 * @param _bool_array_value New value to be copied in member bool_array_value
 */
void ParameterValue::bool_array_value(
        const std::vector<bool>& _bool_array_value)
{
    m_bool_array_value = _bool_array_value;
}

/*!
 * @brief This function moves the value in member bool_array_value
 * @param _bool_array_value New value to be moved in member bool_array_value
 */
void ParameterValue::bool_array_value(
        std::vector<bool>&& _bool_array_value)
{
    m_bool_array_value = std::move(_bool_array_value);
}

/*!
 * @brief This function returns a constant reference to member bool_array_value
 * @return Constant reference to member bool_array_value
 */
const std::vector<bool>& ParameterValue::bool_array_value() const
{
    return m_bool_array_value;
}

/*!
 * @brief This function returns a reference to member bool_array_value
 * @return Reference to member bool_array_value
 */
std::vector<bool>& ParameterValue::bool_array_value()
{
    return m_bool_array_value;
}
/*!
 * @brief This function copies the value in member integer_array_value
 * @param _integer_array_value New value to be copied in member integer_array_value
 */
void ParameterValue::integer_array_value(
        const std::vector<int64_t>& _integer_array_value)
{
    m_integer_array_value = _integer_array_value;
}

/*!
 * @brief This function moves the value in member integer_array_value
 * @param _integer_array_value New value to be moved in member integer_array_value
 */
void ParameterValue::integer_array_value(
        std::vector<int64_t>&& _integer_array_value)
{
    m_integer_array_value = std::move(_integer_array_value);
}

/*!
 * @brief This function returns a constant reference to member integer_array_value
 * @return Constant reference to member integer_array_value
 */
const std::vector<int64_t>& ParameterValue::integer_array_value() const
{
    return m_integer_array_value;
}

/*!
 * @brief This function returns a reference to member integer_array_value
 * @return Reference to member integer_array_value
 */
std::vector<int64_t>& ParameterValue::integer_array_value()
{
    return m_integer_array_value;
}
/*!
 * @brief This function copies the value in member double_array_value
 * @param _double_array_value New value to be copied in member double_array_value
 */
void ParameterValue::double_array_value(
        const std::vector<double>& _double_array_value)
{
    m_double_array_value = _double_array_value;
}

/*!
 * @brief This function moves the value in member double_array_value
 * @param _double_array_value New value to be moved in member double_array_value
 */
void ParameterValue::double_array_value(
        std::vector<double>&& _double_array_value)
{
    m_double_array_value = std::move(_double_array_value);
}

/*!
 * @brief This function returns a constant reference to member double_array_value
 * @return Constant reference to member double_array_value
 */
const std::vector<double>& ParameterValue::double_array_value() const
{
    return m_double_array_value;
}

/*!
 * @brief This function returns a reference to member double_array_value
 * @return Reference to member double_array_value
 */
std::vector<double>& ParameterValue::double_array_value()
{
    return m_double_array_value;
}
/*!
 * @brief This function copies the value in member string_array_value
 * @param _string_array_value New value to be copied in member string_array_value
 */
void ParameterValue::string_array_value(
        const std::vector<std::string>& _string_array_value)
{
    m_string_array_value = _string_array_value;
}

/*!
 * @brief This function moves the value in member string_array_value
 * @param _string_array_value New value to be moved in member string_array_value
 */
void ParameterValue::string_array_value(
        std::vector<std::string>&& _string_array_value)
{
    m_string_array_value = std::move(_string_array_value);
}

/*!
 * @brief This function returns a constant reference to member string_array_value
 * @return Constant reference to member string_array_value
 */
const std::vector<std::string>& ParameterValue::string_array_value() const
{
    return m_string_array_value;
}

/*!
 * @brief This function returns a reference to member string_array_value
 * @return Reference to member string_array_value
 */
std::vector<std::string>& ParameterValue::string_array_value()
{
    return m_string_array_value;
}

size_t ParameterValue::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;













    return current_align;
}

bool ParameterValue::isKeyDefined()
{
    return false;
}

void ParameterValue::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
              
}

Parameter::Parameter()
{
    // m_name com.eprosima.idl.parser.typecode.StringTypeCode@150efb8
    m_name ="";
    // m_value com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@2d773b


}

Parameter::~Parameter()
{


}

Parameter::Parameter(
        const Parameter& x)
{
    m_name = x.m_name;
    m_value = x.m_value;
}

Parameter::Parameter(
        Parameter&& x)
{
    m_name = std::move(x.m_name);
    m_value = std::move(x.m_value);
}

Parameter& Parameter::operator =(
        const Parameter& x)
{

    m_name = x.m_name;
    m_value = x.m_value;

    return *this;
}

Parameter& Parameter::operator =(
        Parameter&& x)
{

    m_name = std::move(x.m_name);
    m_value = std::move(x.m_value);

    return *this;
}

size_t Parameter::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += ParameterValue::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t Parameter::getCdrSerializedSize(
        const Parameter& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.name().size() + 1;

    current_alignment += ParameterValue::getCdrSerializedSize(data.value(), current_alignment);

    return current_alignment - initial_alignment;
}

void Parameter::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_name;
    scdr << m_value;

}

void Parameter::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_name;
    dcdr >> m_value;
}

/*!
 * @brief This function copies the value in member name
 * @param _name New value to be copied in member name
 */
void Parameter::name(
        const std::string& _name)
{
    m_name = _name;
}

/*!
 * @brief This function moves the value in member name
 * @param _name New value to be moved in member name
 */
void Parameter::name(
        std::string&& _name)
{
    m_name = std::move(_name);
}

/*!
 * @brief This function returns a constant reference to member name
 * @return Constant reference to member name
 */
const std::string& Parameter::name() const
{
    return m_name;
}

/*!
 * @brief This function returns a reference to member name
 * @return Reference to member name
 */
std::string& Parameter::name()
{
    return m_name;
}
/*!
 * @brief This function copies the value in member value
 * @param _value New value to be copied in member value
 */
void Parameter::value(
        const ParameterValue& _value)
{
    m_value = _value;
}

/*!
 * @brief This function moves the value in member value
 * @param _value New value to be moved in member value
 */
void Parameter::value(
        ParameterValue&& _value)
{
    m_value = std::move(_value);
}

/*!
 * @brief This function returns a constant reference to member value
 * @return Constant reference to member value
 */
const ParameterValue& Parameter::value() const
{
    return m_value;
}

/*!
 * @brief This function returns a reference to member value
 * @return Reference to member value
 */
ParameterValue& Parameter::value()
{
    return m_value;
}

size_t Parameter::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool Parameter::isKeyDefined()
{
    return false;
}

void Parameter::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}

ParameterEvent::ParameterEvent()
{
    // m_stamp com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@1195bc3

    // m_node com.eprosima.idl.parser.typecode.StringTypeCode@1e2adc7
    m_node ="";
    // m_new_parameters com.eprosima.idl.parser.typecode.SequenceTypeCode@8a8f7c

    // m_changed_parameters com.eprosima.idl.parser.typecode.SequenceTypeCode@31330c

    // m_deleted_parameters com.eprosima.idl.parser.typecode.SequenceTypeCode@f93a98


}

ParameterEvent::~ParameterEvent()
{





}

ParameterEvent::ParameterEvent(
        const ParameterEvent& x)
{
    m_stamp = x.m_stamp;
    m_node = x.m_node;
    m_new_parameters = x.m_new_parameters;
    m_changed_parameters = x.m_changed_parameters;
    m_deleted_parameters = x.m_deleted_parameters;
}

ParameterEvent::ParameterEvent(
        ParameterEvent&& x)
{
    m_stamp = std::move(x.m_stamp);
    m_node = std::move(x.m_node);
    m_new_parameters = std::move(x.m_new_parameters);
    m_changed_parameters = std::move(x.m_changed_parameters);
    m_deleted_parameters = std::move(x.m_deleted_parameters);
}

ParameterEvent& ParameterEvent::operator =(
        const ParameterEvent& x)
{

    m_stamp = x.m_stamp;
    m_node = x.m_node;
    m_new_parameters = x.m_new_parameters;
    m_changed_parameters = x.m_changed_parameters;
    m_deleted_parameters = x.m_deleted_parameters;

    return *this;
}

ParameterEvent& ParameterEvent::operator =(
        ParameterEvent&& x)
{

    m_stamp = std::move(x.m_stamp);
    m_node = std::move(x.m_node);
    m_new_parameters = std::move(x.m_new_parameters);
    m_changed_parameters = std::move(x.m_changed_parameters);
    m_deleted_parameters = std::move(x.m_deleted_parameters);

    return *this;
}

size_t ParameterEvent::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += Time::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += Parameter::getMaxCdrSerializedSize(current_alignment);}

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += Parameter::getMaxCdrSerializedSize(current_alignment);}

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += Parameter::getMaxCdrSerializedSize(current_alignment);}


    return current_alignment - initial_alignment;
}

size_t ParameterEvent::getCdrSerializedSize(
        const ParameterEvent& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += Time::getCdrSerializedSize(data.stamp(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.node().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.new_parameters().size(); ++a)
    {
        current_alignment += Parameter::getCdrSerializedSize(data.new_parameters().at(a), current_alignment);}

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.changed_parameters().size(); ++a)
    {
        current_alignment += Parameter::getCdrSerializedSize(data.changed_parameters().at(a), current_alignment);}

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.deleted_parameters().size(); ++a)
    {
        current_alignment += Parameter::getCdrSerializedSize(data.deleted_parameters().at(a), current_alignment);}


    return current_alignment - initial_alignment;
}

void ParameterEvent::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_stamp;
    scdr << m_node;
    scdr << m_new_parameters;
    scdr << m_changed_parameters;
    scdr << m_deleted_parameters;

}

void ParameterEvent::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_stamp;
    dcdr >> m_node;
    dcdr >> m_new_parameters;
    dcdr >> m_changed_parameters;
    dcdr >> m_deleted_parameters;
}

/*!
 * @brief This function copies the value in member stamp
 * @param _stamp New value to be copied in member stamp
 */
void ParameterEvent::stamp(
        const Time& _stamp)
{
    m_stamp = _stamp;
}

/*!
 * @brief This function moves the value in member stamp
 * @param _stamp New value to be moved in member stamp
 */
void ParameterEvent::stamp(
        Time&& _stamp)
{
    m_stamp = std::move(_stamp);
}

/*!
 * @brief This function returns a constant reference to member stamp
 * @return Constant reference to member stamp
 */
const Time& ParameterEvent::stamp() const
{
    return m_stamp;
}

/*!
 * @brief This function returns a reference to member stamp
 * @return Reference to member stamp
 */
Time& ParameterEvent::stamp()
{
    return m_stamp;
}
/*!
 * @brief This function copies the value in member node
 * @param _node New value to be copied in member node
 */
void ParameterEvent::node(
        const std::string& _node)
{
    m_node = _node;
}

/*!
 * @brief This function moves the value in member node
 * @param _node New value to be moved in member node
 */
void ParameterEvent::node(
        std::string&& _node)
{
    m_node = std::move(_node);
}

/*!
 * @brief This function returns a constant reference to member node
 * @return Constant reference to member node
 */
const std::string& ParameterEvent::node() const
{
    return m_node;
}

/*!
 * @brief This function returns a reference to member node
 * @return Reference to member node
 */
std::string& ParameterEvent::node()
{
    return m_node;
}
/*!
 * @brief This function copies the value in member new_parameters
 * @param _new_parameters New value to be copied in member new_parameters
 */
void ParameterEvent::new_parameters(
        const std::vector<Parameter>& _new_parameters)
{
    m_new_parameters = _new_parameters;
}

/*!
 * @brief This function moves the value in member new_parameters
 * @param _new_parameters New value to be moved in member new_parameters
 */
void ParameterEvent::new_parameters(
        std::vector<Parameter>&& _new_parameters)
{
    m_new_parameters = std::move(_new_parameters);
}

/*!
 * @brief This function returns a constant reference to member new_parameters
 * @return Constant reference to member new_parameters
 */
const std::vector<Parameter>& ParameterEvent::new_parameters() const
{
    return m_new_parameters;
}

/*!
 * @brief This function returns a reference to member new_parameters
 * @return Reference to member new_parameters
 */
std::vector<Parameter>& ParameterEvent::new_parameters()
{
    return m_new_parameters;
}
/*!
 * @brief This function copies the value in member changed_parameters
 * @param _changed_parameters New value to be copied in member changed_parameters
 */
void ParameterEvent::changed_parameters(
        const std::vector<Parameter>& _changed_parameters)
{
    m_changed_parameters = _changed_parameters;
}

/*!
 * @brief This function moves the value in member changed_parameters
 * @param _changed_parameters New value to be moved in member changed_parameters
 */
void ParameterEvent::changed_parameters(
        std::vector<Parameter>&& _changed_parameters)
{
    m_changed_parameters = std::move(_changed_parameters);
}

/*!
 * @brief This function returns a constant reference to member changed_parameters
 * @return Constant reference to member changed_parameters
 */
const std::vector<Parameter>& ParameterEvent::changed_parameters() const
{
    return m_changed_parameters;
}

/*!
 * @brief This function returns a reference to member changed_parameters
 * @return Reference to member changed_parameters
 */
std::vector<Parameter>& ParameterEvent::changed_parameters()
{
    return m_changed_parameters;
}
/*!
 * @brief This function copies the value in member deleted_parameters
 * @param _deleted_parameters New value to be copied in member deleted_parameters
 */
void ParameterEvent::deleted_parameters(
        const std::vector<Parameter>& _deleted_parameters)
{
    m_deleted_parameters = _deleted_parameters;
}

/*!
 * @brief This function moves the value in member deleted_parameters
 * @param _deleted_parameters New value to be moved in member deleted_parameters
 */
void ParameterEvent::deleted_parameters(
        std::vector<Parameter>&& _deleted_parameters)
{
    m_deleted_parameters = std::move(_deleted_parameters);
}

/*!
 * @brief This function returns a constant reference to member deleted_parameters
 * @return Constant reference to member deleted_parameters
 */
const std::vector<Parameter>& ParameterEvent::deleted_parameters() const
{
    return m_deleted_parameters;
}

/*!
 * @brief This function returns a reference to member deleted_parameters
 * @return Reference to member deleted_parameters
 */
std::vector<Parameter>& ParameterEvent::deleted_parameters()
{
    return m_deleted_parameters;
}

size_t ParameterEvent::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;








    return current_align;
}

bool ParameterEvent::isKeyDefined()
{
    return false;
}

void ParameterEvent::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
         
}
